Index: libiberty/cplus-dem.c
===================================================================
--- libiberty/cplus-dem.c	(revision 237852)
+++ libiberty/cplus-dem.c	(working copy)
@@ -89,7 +89,10 @@
 #if !defined (CPLUS_MARKER)
 #define CPLUS_MARKER '$'
 #endif
 
+#ifndef INT_MAX
+# define INT_MAX       (int)(((unsigned int) ~0) >> 1)          /* 0x7FFFFFFF */ 
+#endif
 enum demangling_styles current_demangling_style = auto_demangling;

 static char cplus_markers[] = { CPLUS_MARKER, '.', '$', '\0' };
@@ -144,6 +144,9 @@ struct work_stuff
   string* previous_argument; /* The last function argument demangled.  */
   int nrepeats;         /* The number of times to repeat the previous
 			   argument.  */
+  int *proctypevec;     /* Indices of currently processed remembered typevecs.  */
+  int proctypevec_size;
+  int nproctypes;
 };
 
 #define PRINT_ANSI_QUALIFIERS (work -> options & DMGL_ANSI)
@@ -436,6 +439,10 @@ iterate_demangle_function (struct work_stuff *,
 
 static void remember_type (struct work_stuff *, const char *, int);
 
+static void push_processed_type (struct work_stuff *, int);
+
+static void pop_processed_type (struct work_stuff *);
+
 static void remember_Btype (struct work_stuff *, const char *, int, int);
 
 static int register_Btype (struct work_stuff *);
@@ -1302,6 +1309,13 @@ work_stuff_copy_to_from (struct work_stuff *to, st
       memcpy (to->btypevec[i], from->btypevec[i], len);
     }
 
+  if (from->proctypevec)
+    {
+      to->proctypevec = XNEWVEC (int, from->proctypevec_size);
+      memcpy (to->proctypevec, from->proctypevec, 
+	      from->proctypevec_size * sizeof(int));
+    }
+
   if (from->ntmpl_args)
     to->tmpl_argvec = XNEWVEC (char *, from->ntmpl_args);
 
@@ -1336,6 +1350,12 @@ delete_non_B_K_work_stuff (struct work_stuff *work
       work -> typevec = NULL;
       work -> typevec_size = 0;
     }
+  if (work -> proctypevec != NULL)
+    {
+      free (work -> proctypevec);
+      work -> proctypevec = NULL;
+      work -> proctypevec_size = 0;
+    }
   if (work->tmpl_argvec)
     {
       int i;
@@ -3554,6 +3574,8 @@ static int
 do_type (struct work_stuff *work, const char **mangled, string *result)
 {
   int n;
+  int i;
+  int is_proctypevec;
   int done;
   int success;
   string decl;
@@ -3566,6 +3588,7 @@ do_type (struct work_stuff *work, const char **man
 
   done = 0;
   success = 1;
+  is_proctypevec = 0;
   while (success && !done)
     {
       int member;
@@ -3626,7 +3649,14 @@ do_type (struct work_stuff *work, const char **man
 	      success = 0;
 	    }
 	  else
-	    {
+	    for (i = 0; i < work -> nproctypes; i++)
+	      if (work -> proctypevec [i] == n)
+	        success = 0;
+	  
+	  if (success)
+	    {    
+	      is_proctypevec = 1;
+	      push_processed_type (work, n);
 	      remembered_type = work -> typevec[n];
 	      mangled = &remembered_type;
 	    }
@@ -3849,6 +3879,9 @@ do_type (struct work_stuff *work, const char **man
     string_delete (result);
   string_delete (&decl);
 
+  if (is_proctypevec)
+    pop_processed_type (work); 
+
   if (success)
     /* Assume an integral type, if we're not sure.  */
     return (int) ((tk == tk_none) ? tk_integral : tk);
@@ -4261,6 +4294,34 @@ do_arg (struct work_stuff *work, const char **mang
 }
 
 static void
+push_processed_type (struct work_stuff *work, int typevec_index)
+{
+  if (work -> nproctypes >= work -> proctypevec_size)
+    {
+      if (work -> proctypevec_size == 0)
+	{
+	  work -> proctypevec_size = 3;
+	  work -> proctypevec = XNEWVEC (int, work -> proctypevec_size);
+	}
+      else
+	{
+	  if (work -> proctypevec_size > INT_MAX / 2)
+            xmalloc_failed (INT_MAX);
+          work -> proctypevec_size *= 2;
+          work -> proctypevec
+            = XRESIZEVEC (int, work->proctypevec, work->proctypevec_size);
+        }
+    }
+    work -> proctypevec [work -> nproctypes ++] = typevec_index;
+}
+
+static void
+pop_processed_type (struct work_stuff *work)
+{
+  work -> nproctypes --;
+}
+
+static void
 remember_type (struct work_stuff *work, const char *start, int len)
 {
   char *tem;
@@ -4524,10 +4585,13 @@ demangle_args (struct work_stuff *work, const char
 		{
 		  string_append (declp, ", ");
 		}
+	      push_processed_type (work, t);  
 	      if (!do_arg (work, &tem, &arg))
 		{
+		  pop_processed_type (work);
 		  return (0);
 		}
+	      pop_processed_type (work);
 	      if (PRINT_ARG_TYPES)
 		{
 		  string_appends (declp, &arg);
